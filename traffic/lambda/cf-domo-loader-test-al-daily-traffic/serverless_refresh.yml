service: cf-domo-loader-refresh # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs10.x
  region: ${file(./serverless.env.yml):${opt:stage}.region}
  stage: ${file(./serverless.env.yml):${opt:stage}.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - "kinesis:*"
       - "lambda:*"
       - "s3:*"
      Resource: "*"
  environment:
      stage: ${file(./serverless.env.yml):${opt:stage}.stage}
      log_level: ${file(./serverless.env.yml):${opt:stage}.log_level}
      bouncedstreamid: ${file(./serverless.env.yml):${opt:stage}.bouncedstreamid}
      newstreamid: ${file(./serverless.env.yml):${opt:stage}.newstreamid}
      totalstreamid: ${file(./serverless.env.yml):${opt:stage}.totalstreamid}
      hourlyFilteredPropertyStreamId: ${file(./serverless.env.yml):${opt:stage}.hourlyFilteredPropertyStreamId}
      hourlyFilteredSpaceStreamId: ${file(./serverless.env.yml):${opt:stage}.hourlyFilteredSpaceStreamId}
      hourlyRawPropertyStreamId: ${file(./serverless.env.yml):${opt:stage}.hourlyRawPropertyStreamId}
      hourlyRawSpaceStreamId: ${file(./serverless.env.yml):${opt:stage}.hourlyRawSpaceStreamId}
      dailyFilteredPropertyStreamId: ${file(./serverless.env.yml):${opt:stage}.dailyFilteredPropertyStreamId}
      dailyFilteredSpaceStreamId: ${file(./serverless.env.yml):${opt:stage}.dailyFilteredSpaceStreamId}
      dailyRawPropertyStreamId: ${file(./serverless.env.yml):${opt:stage}.dailyRawPropertyStreamId}
      dailyRawSpaceStreamId: ${file(./serverless.env.yml):${opt:stage}.dailyRawSpaceStreamId}
      dailyPropertyDwellStreamId: ${file(./serverless.env.yml):${opt:stage}.dailyPropertyDwellStreamId}
      dailySpaceDwellStreamId: ${file(./serverless.env.yml):${opt:stage}.dailySpaceDwellStreamId}
      dailyFloorStreamId: ${file(./serverless.env.yml):${opt:stage}.dailyFloorStreamId}
      monthlyPropertyDwellStreamId: ${file(./serverless.env.yml):${opt:stage}.monthlyPropertyDwellStreamId}
      monthlySpaceDwellStreamId: ${file(./serverless.env.yml):${opt:stage}.monthlySpaceDwellStreamId}
      monthlyFilteredPropertyStreamId: ${file(./serverless.env.yml):${opt:stage}.monthlyFilteredPropertyStreamId}
      monthlyFilteredSpaceStreamId: ${file(./serverless.env.yml):${opt:stage}.monthlyFilteredSpaceStreamId}
      monthlyRawPropertyStreamId: ${file(./serverless.env.yml):${opt:stage}.monthlyRawPropertyStreamId}
      monthlyRawSpaceStreamId: ${file(./serverless.env.yml):${opt:stage}.monthlyRawSpaceStreamId}
      frequencyStreamId: ${file(./serverless.env.yml):${opt:stage}.frequencyStreamId}
      crossvisitorStreamId: ${file(./serverless.env.yml):${opt:stage}.crossvisitorStreamId}
      merakiDevicesStatusStreamId: ${file(./serverless.env.yml):${opt:stage}.merakiDevicesStatusStreamId}
      merakiDevicesStreamId: ${file(./serverless.env.yml):${opt:stage}.merakiDevicesStreamId}
      socialwifiStreamId: ${file(./serverless.env.yml):${opt:stage}.socialwifiStreamId}
      giftCardTransactionStreamId: ${file(./serverless.env.yml):${opt:stage}.giftCardTransactionStreamId}
      giftCardInfoStreamId: ${file(./serverless.env.yml):${opt:stage}.giftCardInfoStreamId}
      dbhost: ${file(credentials.${opt:stage}.yml):dbhost}
      dbuser: ${file(credentials.${opt:stage}.yml):dbuser}
      dbpassword: ${file(credentials.${opt:stage}.yml):dbpassword}
      dbname: ${file(credentials.${opt:stage}.yml):dbname}



plugins:
  - serverless-plugin-split-stacks
  - serverless-plugin-aws-alerts
  - serverless-offline
# you can overwrite defaults here
#  stage: dev
#  region: us-west-2

custom:
  alerts:
    topics:
      alarm:
        topic: ${self:service}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: mithra.ramesh@slalom.com # Change this to your email address
    alarms:

functions:

  al-daily-traffic_refresh_8:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_dashboard.getDailyTraffic_refresh_8
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/dailyTraffic
        - schedule: cron(45 2 * * ? *)
        
  al-daily-traffic_refresh_15:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_dashboard.getDailyTraffic_refresh_15
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/dailyTraffic
        - schedule: cron(00 3 * * ? *)
        
  al-daily-traffic_refresh_22:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_dashboard.getDailyTraffic_refresh_22
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/dailyTraffic
        - schedule: cron(15 3 * * ? *)
        
  al-daily-traffic_refresh_29:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_dashboard.getDailyTraffic_refresh_29
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/dailyTraffic
        - schedule: cron(30 3 * * ? *)

  al-daily-dwell_refresh_8:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_dashboard.getDailyDwell_refresh_8
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/dailyDwell
        - schedule: cron(45 3 * * ? *)
        
  al-daily-dwell_refresh_15:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_dashboard.getDailyDwell_refresh_15
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/dailyDwell
        - schedule: cron(00 4 * * ? *)
        
  al-daily-dwell_refresh_22:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_dashboard.getDailyDwell_refresh_22
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/dailyDwell
        - schedule: cron(15 4 * * ? *)
        
  al-daily-dwell_refresh_29:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_dashboard.getDailyDwell_refresh_29
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/dailyDwell
        - schedule: cron(30 4 * * ? *)


  al-visitor-flow_refresh_8:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_visitor_flow.get_refresh_8
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/visitorFlow
        - schedule: cron(00 2 * * ? *)
        
  al-visitor-flow_refresh_15:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_visitor_flow.get_refresh_15
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/visitorFlow
        - schedule: cron(30 2 * * ? *)
        
  al-visitor-flow_refresh_22:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_visitor_flow.get_refresh_22
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/visitorFlow
        - schedule: cron(00 5 * * ? *)
        
  al-visitor-flow_refresh_29:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_visitor_flow.get_refresh_29
    alarms:
      - functionErrors
    timeout: 30
    events:
        - http: GET v1/aislelabs/visitorFlow
        - schedule: cron(30 5 * * ? *)

  al-socialwifi_refresh_8:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_socialwifi.get_refresh_8
    timeout: 30
    events:
        - http: GET v1/aislelabs/socialwifi
        - schedule: cron(00 0 * * ? *)
        
  al-socialwifi_refresh_15:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_socialwifi.get_refresh_15
    timeout: 30
    events:
        - http: GET v1/aislelabs/socialwifi
        - schedule: cron(30 0 * * ? *)
        
  al-socialwifi_refresh_22:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_socialwifi.get_refresh_22
    timeout: 30
    events:
        - http: GET v1/aislelabs/socialwifi
        - schedule: cron(00 1 * * ? *)
        
        
  al-socialwifi_refresh_29:
    environment:
        apikey: ${file(credentials.${opt:stage}.yml):apikey}
        apikey2: ${file(credentials.${opt:stage}.yml):apikey2}
    handler: scheduling/aislelabs_socialwifi.get_refresh_29
    timeout: 30
    events:
        - http: GET v1/aislelabs/socialwifi
        - schedule: cron(30 1 * * ? *)
        
